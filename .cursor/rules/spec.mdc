You must always follow a Spec-driven, step-by-step workflow, with strict real-world validation and data integrity requirements:

	1.	Convert ideas into requirements (SPEC).
	2.	Expand into technical design (DESIGN).
	3.	Break into atomic tasks (TASKS).
	4.	Execute one task at a time (tests first, code second).
	5.	Present diffs + reviews for human audit.
	6.	Commit only after approval, updating Steering Notes and Traceability.

â¸»

ðŸš« Strict Data & Validation Guidelines

- **No mock, sample, synthetic, or dummy data is permitted at any stage.**
- **All validation, testing, and verification must be performed using actual data, real system resources, and functional end-to-end workflows.**
- **Do not use stubs, fakes, or simulated components unless explicitly instructed and confirmed in writing.**
- **If real data or resources are unavailable, halt and request explicit clarification before proceeding.**
- **All tests must exercise real-world behavior and integration, not isolated or artificial scenarios.**

â¸»

Workflow Flow
	1.	Idea â†’ SPEC.md

	â€¢	Input: Plain-English feature request.
	â€¢	Output: Requirements doc using Requirements Spec Template.

	2.	SPEC.md â†’ DESIGN.md

	â€¢	Input: Approved spec.
	â€¢	Output: Technical design using Design Template.

	3.	DESIGN.md â†’ TASKS.md

	â€¢	Input: Approved design.
	â€¢	Output: Sequential tasks using Task Plan Template.

	4.	Task Execution Loop (repeat per task):

	â€¢	Write failing tests first (using actual data and real system calls).
	â€¢	Implement minimal code to pass tests.
	â€¢	Run commands locally.
	â€¢	Evaluate results.
	â€¢	Prepare Diff Review.
	â€¢	Pause for human approval.

	5.	Approval â†’ Commit

	â€¢	Use Commit Message Template.
	â€¢	Update Traceability and Steering Notes.

â¸»

Templates
	1.	Requirements Spec (SPEC.md)

# Feature Specification â€” <Feature Name>

## Problem Statement
<Describe problem in 1â€“2 sentences.>

## Scope
- In Scope:
- Out of Scope:

## User Personas
- <Persona>: <why they care>

## User Stories
- As a <persona>, I want <capability>, so that <benefit>.

## Acceptance Criteria
- Given <context>, When <action>, Then <expected outcome>.

## Constraints
- Performance: <â€¦>
- Compliance: <â€¦>

	2.	Technical Design (DESIGN.md)

# Technical Design â€” <Feature Name>

## Architecture Context
<How feature fits into system.>

## Data Flow
1. Input
2. Processing
3. Output

## Interfaces
- Function signatures
- API endpoints
- CLI commands

## Database Schema
- Table <name>: columns + constraints

## Error Handling
<cases + fallbacks>

## Observability
- Logs, metrics

## Performance
- Complexity, caching

	3.	Task Plan (TASKS.md)

# Task Plan â€” <Feature Name>

## Task 1: <Title>
- Goal:
- Changes:
- Tests:
- Commands:
- Exit Criteria:
- Risks:

## Task 2: <Title>
...

	4.	Steering Notes (STEERING_NOTES.md)

# Steering Notes

## Coding Conventions
- snake_case for vars, PascalCase for classes.

## Tech Choices
- DB: DuckDB
- Broker: Dhan API v2

## Do / Donâ€™t
- Prefer composition
- Do not hardcode secrets

## Glossary
- Signal = buy/sell trigger
- Zone = supply-demand region

## Open Decisions
- [ ] Example pending decision

	5.	Traceability Matrix (TRACEABILITY.md)

# Traceability Matrix

| User Story | Acceptance Criteria | Design Element | Task ID | Test Case | Commit |
|------------|----------------------|----------------|---------|-----------|--------|
| US-01      | AC-01, AC-02         | Module X       | T-01    | test_x.py | a1b2c3 |

	6.	Diff Review (DIFF_REVIEW.md)

# Diff Review â€” Task <ID>

## Summary
- What changed
- Why (link to SPEC/DESIGN/Task)

## Diff
```diff
<code diff here>

Tests
	â€¢	Added/Updated:
	â€¢	Results: Passed

Risks & Notes
	â€¢	Migration impact:
	â€¢	Follow-ups:

7) Commit Message (COMMIT_MESSAGE.md)  

feat(): 

Context:
	â€¢	Linked Spec: SPEC.md#
	â€¢	Linked Task: TASKS.md#

Changes:
	â€¢	

<bullet list>




Tests:
	â€¢	<added/updated>
	â€¢	All tests passing

Notes:
	â€¢	<migrations/configs/TODOs>

---

Rules & Guardrails  
- Always go Spec â†’ Design â†’ Tasks â†’ Execution â†’ Diff â†’ Commit.  
- Never skip steps or code without spec/design.  
- Run only local environment commands, no external calls without explicit permission.  
- Keep diffs small, test-first, and reversible.  
- Update Steering Notes and Traceability on every step.  
- Wait for human approval before committing.  

---

Done Definition  
A feature is Done only when:  
- SPEC and DESIGN finalized.  
- All tasks executed and tests pass.  
- Diff reviewed and approved.  
- Commit made with proper message.  
- Steering Notes and Traceability updated.  

---

File Structure  
All files must be created in a folder under `.meta/<context-name>/`

.meta/
//
spec.md
design.md
tasks.md
steering_notes.md
traceability.md
diff_review.md
commit_message.md
