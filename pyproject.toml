[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "duckdb-financial-infra"
version = "0.1.0"
description = "ðŸš€ Advanced DuckDB Financial Framework - Production-grade platform with complex queries, real-time trading, and enterprise analytics"
authors = [
    {name = "Financial Data Team", email = "team@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    # Core dependencies
    "duckdb>=0.10.0",
    "pandas>=2.0.0",
    "pyarrow>=14.0.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",

    # Reactive programming
    "rx>=3.2.0",

    # Data quality
    "great-expectations>=0.18.0",

    # Logging and observability
    "structlog>=23.2.0",
    "opentelemetry-distro>=0.43b0",
    "opentelemetry-instrumentation-fastapi>=0.43b0",
    "prometheus-client>=0.19.0",

    # Development and testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",

    # Additional utilities
    "click>=8.1.0",
    "rich>=13.7.0",
    "python-dotenv>=1.0.0",
    "jinja2>=3.1.0",
]

[project.urls]
Homepage = "https://github.com/your-org/duckdb-financial-infra"
Documentation = "https://duckdb-financial-infra.readthedocs.io/"
Repository = "https://github.com/your-org/duckdb-financial-infra.git"
Issues = "https://github.com/your-org/duckdb-financial-infra/issues"

[project.scripts]
duckdb-financial = "src.interfaces.cli.main:app"

# [project.entry-points]
# Temporarily disabled due to TOML parsing issues with coverage tool



[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
  \.eggs|\.git|\.hg|\.mypy_cache|\.tox|\.venv|build|dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["fastapi", "pydantic", "duckdb", "pandas"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "great_expectations.*",
    "rx.*",
    "opentelemetry.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "functional: Functional tests",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
